apply plugin: 'jacoco'

jacoco {
  toolVersion = "$jacocoVersion"
}

tasks.withType(Test) {
  jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport) {

  group "Reporting"
  description "Generate Jacoco coverage reports."
  dependsOn 'testDebugUnitTest'
  dependsOn 'createDebugCoverageReport'

  reports {
    xml.enabled = true
    html.enabled = true
    html.destination file("${rootProject.buildDir}/coverage-report")
  }

  def javaClasses = []
  def kotlinClasses = []
  def javaSrc = []
  def kotlinSrc = []
  def execution = []

  def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']

  rootProject.subprojects.each { proj ->
    javaClasses   << fileTree(dir: "$proj.buildDir/intermediates/javac/debug", excludes: fileFilter)
    kotlinClasses << fileTree(dir: "$proj.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    javaSrc       << "$proj.projectDir/java"
    kotlinSrc     << "$proj.projectDir/kotlin"
    execution     << fileTree(dir: proj.buildDir,
      includes: ['jacoco/testDebugUnitTest.exec',
                 'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'])
  }

  sourceDirectories = files([javaSrc, kotlinSrc])
  classDirectories = files([javaClasses, kotlinClasses])

  print execution

  executionData = files(execution)

  doLast() {
    print "file://${reports.html.destination}/index.html"
  }
}
